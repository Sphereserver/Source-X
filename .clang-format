BasedOnStyle: LLVM
Language: Cpp
Standard: c++20
TabWidth: 4
IndentWidth: 4
UseTab: Never
ColumnLimit: 160

#LineEndingStyle: LF
#MaxEmptyLinesToKeep: 3

##-- Alignment
AlignAfterOpenBracket: AlwaysBreak
AlignConsecutiveAssignments: false
AlignConsecutiveDeclarations: false
#AlignEscapedNewlinesLeft: false
AlignTrailingComments: true

DerivePointerAlignment: false
PointerAlignment: Right

##-- Single line statements
AllowShortBlocksOnASingleLine: false
AllowShortCaseLabelsOnASingleLine: false
AllowShortFunctionsOnASingleLine: None
AllowShortIfStatementsOnASingleLine: Never
AllowShortLambdasOnASingleLine: Inline
AllowShortLoopsOnASingleLine: false

##-- Braces
BreakBeforeBraces: Custom #Allman
BraceWrapping:
  AfterCaseLabel: true
  AfterClass: false
  AfterControlStatement: Always
  AfterEnum: true
  AfterFunction: true
  AfterNamespace: true
  AfterStruct: true
  AfterUnion: true
  BeforeCatch: true
  BeforeElse: true
  BeforeLambdaBody: true
  IndentBraces: false
  SplitEmptyFunction: false
  SplitEmptyRecord: false
  SplitEmptyNamespace: false
Cpp11BracedListStyle: false

##-- Line breaks
AlwaysBreakAfterDefinitionReturnType: None
AlwaysBreakAfterReturnType: None
AlwaysBreakBeforeMultilineStrings: true
AlwaysBreakTemplateDeclarations: true
BreakAfterJavaFieldAnnotations: false
BreakBeforeBinaryOperators: None
BreakConstructorInitializers: AfterColon
#BreakInheritanceList: AfterColon
BreakBeforeTernaryOperators: false
BreakConstructorInitializersBeforeComma: true
BreakStringLiterals: false

##-- Indentation
IndentCaseBlocks: false
IndentCaseLabels: true
IndentGotoLabels: true
IndentPPDirectives: AfterHash
LambdaBodyIndentation: Signature
NamespaceIndentation: Inner

##-- Spaces in/between statements/etc
SpaceAfterCStyleCast: false
SpaceAfterTemplateKeyword: false
#SpaceAroundPointerQualifiers: Left
SpaceBeforeAssignmentOperators: true
SpaceBeforeCpp11BracedList: true
SpaceBeforeCtorInitializerColon: true
SpaceBeforeInheritanceColon: true
SpaceBeforeParens: ControlStatements
SpaceInEmptyParentheses: false
SpacesInAngles: false
SpacesInCStyleCastParentheses: false
SpacesInContainerLiterals: false
SpacesInParentheses: false
SpacesInSquareBrackets: false

##-- Misc
AllowAllParametersOfDeclarationOnNextLine: true
AccessModifierOffset: -4
BinPackArguments: false
BinPackParameters: false
BreakAfterAttributes: Always
ExperimentalAutoDetectBinPacking: false
ConstructorInitializerAllOnOneLineOrOnePerLine: false
DisableFormat: false
InsertNewlineAtEOF: true
KeepEmptyLinesAtTheStartOfBlocks: false
ReflowComments: false
SeparateDefinitionBlocks: Always

#-- Include order
#IncludeIsMainRegex: '$?'
#IncludeBlocks: Regroup
IncludeCategories:
#TODO: main include!
    # Headers in "" with .h extension.
    - Regex: '"([A-Za-z0-9\/-_])+\.h"'
      Priority: 1
    # Headers in "" with .hpp extension.
    - Regex: '"([A-Za-z0-9\/-_])+\.hpp"'
      Priority: 2

    # Headers in <> with .h extension.
    - Regex: '<([A-Za-z0-9\/-_])+\.h>'
      Priority: 10
    # Headers in <> with .hpp extension.
    - Regex: '<([A-Za-z0-9\/-_])+\.hpp>'
      Priority: 20
    # Headers in <> without extension.
    - Regex: '<([A-Za-z0-9\/-_])+>'
      Priority: 30
SortIncludes: false #CaseSensitive
